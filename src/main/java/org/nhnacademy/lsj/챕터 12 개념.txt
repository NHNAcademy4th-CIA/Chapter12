Introduction to Threads

사람과 마찬가지로 컴퓨터도 multitask 할 수 있음

CPU는 본래 하나의 작업만 할 수 있기 떄문에

사람이랑 똑같이 동시에 여러 작업을 수행할 수는 없지만

작업 처리를 하는 간격 사이 사이를 매우 짧게 가져가

여러가지 작업을 동시에 하는 것과 다름 없는 성능을 낸다.

혹은 애초에 CPU코어 자체를 여러개 가지고 있어

각각의 코어가 각자의 연산을 함으로써 multitask 성능을 증가시키기도 한다.

이러한 기능을 사용하려면 개발자는 parallel programming을 해야 한다.

Computer에서는 단일작업을 thread라고 한다.(작업의 가장 작은 단위기도 함)

parallel programing 을 한다는 것은 multi thread를 지원하는 것과 똑같음

JAVA에서 thread는 java.lang.Thread 클래스에 속하는 객체로 표현된다.

또 thread의 목적은 단일 메서드를 한번만 실행하는 것임

thread를 programing 하는 방법은 2가지 정도가 있는데

하나는 thread의 하위 클래스를 만들고 , public void run() 메서드를 정의하는 것

이 run 메서드는 thread가 수행할 작업을 의미함

public class NamedThread extends Thread {
   private String name;  // The name of this thread.
   public NamedThread(String name) {  // Constructor gives name to thread.
      this.name = name;
   }
   public void run() {  // The run method prints a message to standard output.
      System.out.println("Greetings from thread '" + name + "'!");
   }
}


 NamedThread namedThread = new NamedThread("hi");

        namedThread.start();

        System.out.println("Thread has been started");

이 thread를 실행하려면 start메서드를 호출하여 실행하게 된다.

이 start메서드의 목적은 Thread객체의 run메서드를 실행할 새로운 thread를 생성하는 것

즉 start가 실행 되면 두 개의 thread가 있는 상태

그중 하나는 System.out.println("Thread has been started"); 를 실행하고

나머지 하나는

System.out.println("Greetings from thread '" + name + "'!"); 를 실행함

이렇게 새 thread는 이미 존재하는 thread와 함께 병렬로 실행이 된다.

Greetings.start 호출은 run 호출과 매우 다름

Greetings.run 을 호출하면 새 스레드를 생성하는 대신 동일한 스레드에서
run 메서드가 실행 됨 , run 메서드 끝나고 난 후에 sout 찍는거야
병렬성과 불확정성 없어

반면에 start는 새로운 thread만들어서 실행시키는 거야
따라서 run메서드랑 sout 찍는게 동시에 일어나 병렬성과 불확정성이 있음

따라서 sout이 먼저 찍힐수도 , run 메서드가 먼저 실행될수도 있음

이런 경쟁상태가 생기는 것을 race condition이라 함

또 다른 방법으로는

java.lang.Runnable interface를 구현하는 class를 정의하는 것 임

Runnable interface는  run 이라는 단일 메서드를 정의 함

Runnable 이 주어지면 Runnable의 run 메서드를 실행하는 작업을 수행하는
Thread를 생성하는 것이 가능함

class NamedRunnable implements Runnable {
    private String name;  // The name of this Runnable.

    public NamedRunnable(String name) {  // Constructor gives name to object.
        this.name = name;
    }


    @Override
    public void run() {
        System.out.println("Greetings from runnable '" + name + "'!");
    }
}


 NamedRunnable greetings = new NamedRunnable("Fred");
        Thread greetingsThread = new Thread(greetings);
        greetingsThread.start();


이런식으로 interface 정의 해 놓고 , 이걸 Thread 객체를 생성하는
생성자로 던져 줄 수 있어용

Thread greetingsFromFred = new Thread(
    () -> System.out.println("Greetings from Fred!")
);
greetingsFromFred.start();

Runnable은 Functional Interface니까 당연히 Lambda Expression 으로 표현 가능 함


Operations on Threads


Java 프로그램이 실행 중인 환경에 대한 정보를 얻을 수 있도록 하는 클래스인

Runtime 의 스레드 관련 메소드부터 시작하겠습니다 .

작업을 여러 프로세서에 분산시키기 위해 병렬 프로그래밍을 수행하는 경우

사용 가능한 프로세서 수를 고려할 수 있습니다. 예를 들어, 각 프로세서에 대해

하나의 스레드를 생성할 수 있습니다. Java에서는 함수를 호출하여 프로세서 수를 확인할 수 있습니다.

Runtime.getRuntime().availableProcessors()


hread 유형의 객체인 경우 , 부울 값 함수 thrd.isAlive()를 사용하여

thrd가 종료되었는지 여부를 테스트할 수 있습니다 .

thread가 실행되고 있으면 alive , 종료됐으면 dead라고 말함


 Thread.sleep(milliseconds)은 이 메서드를 실행하는 스레드가 지정된 밀리초 동안

 "휴면" 상태가 되도록 합니다. 잠자는 스레드는 아직 살아있지만 실행되고 있지 않습니다.

 스레드가 절전 모드인 동안 컴퓨터는 실행 가능한 다른 스레드(또는 다른 프로그램)에서

 작업할 수 있습니다.

 또 sleep 메서드는 Checked Exception 임  , InterruptedException 을 발생 시키기 가능

 thrd.interrupt() 를 통해서 thread 중단 됐는지 확인 가능함

 또 중단 여부 확인후 중단 상태를 지우는 속성도 갖고 있음

 떄로는 한 thread가 다른 thread가 죽을 때까지 기다려야 하는 경우도 있음

 Join 메서드를 사용하여 수행 된다 .

 만약 thrd가 Thread라고 가정했을때 , 다른 스레드가 thrd.join()을 호출하면

 해당 thread는 thrd가 종료될 떄 까지 sleep 한다

 thread 는 daemon , priority 2가지 상태가 존재함


.setDaemon(true)를 호출하여 deamon thread로 지정할 수 있습니다.

이 작업은 thread가 시작되기 전에 수행되어야 합니다.

garbage collector 이 daemon thread에 속합니다.

또한 일반 thread가 모두 종료되면 daemon thread는 자동으로 종료됩니다.

모든 thread는 priority(우선순위)를 가집니다.

우선 순위 값이 더 높은 thread는 우선순우ㅟ가 더 낮은 thrd보다 우선적으로 실행됩니다.

예를들어 background에서 실행될 작업들은 우선순위를 낮게 주는 방식으로 활용할 수 있습니다.

thrd.setPriority(p) 를 사용하여 우선순위를 설정 할 수 있습니다.


마지막으로 정적 메서드 Thread.currentThread() 가 현재 스레드를 반환한다는 점에 유의하겠습니다 .
즉, 이 메서드의 반환 값은 해당 메서드를 실행한 스레드입니다. 이를 통해 스레드는 자신에 대한 참조를 얻을 수 있으므로
자신의 속성을 수정할 수 있습니다. 예를 들어, Thread.currentThread().getPriority() 를 호출하여 현재 실행 중인 스레드의 우선순위를 결정할 수 있습니다 .




 Mutual Exclusion with "synchronized"


 multi thread의 경우에는 race condition 이 생기게 되는데

 synchronized 를 달아주면 동기화 되면서 , exclusive access를 하게 됩니다.


 이를 synchronized method , synchronized statement 라고 합니다.

 synchronized public void increment() {
      count = count + 1;
   }

   다음과 같은 방식입니다 , 실제로 System.out.print는  Synchronized method 기 떄문에 상당히 느립니다.

   하지만 이는 Exclusive Access 를 보장하는 건 아니야

동기화 되는 thread 간의  mutual exclusion(상호 배제) 만을 보장합니다.

즉 한놈이 쓰고있으면 다른 놈이 못쓰는거를 보장해

이러면 완벽한 Exclusive Access아닌가??

그건 아냐  다음의 예시가 존재

if ( tsc.getValue() == 10 ) {
   doSomething();
}

이러면 if문안으로 들어갈떄 다른 thread가 카운터를 증가시키면서 동시에 작업이 일어날수도 있음

따라서

synchronized(tsc) {
   if ( tsc.getValue() == 10 )
      doSomething();
}

이렇게 if 문도 Synchronized 문안에 넣어서 처리하면 돼


synchronized( object ) {
   statements
}


자바에서는 동기화 = Synchronized를 synchronization lock를 통해서 구현하고 있음


Synchronized 가 꼭 좋은것만은 아니야 , 얘는 기본적으로 느려 , 또 deadlock (교착)상태가 발생할 가능성도 있어

thread가 얻지 못할 resources를 영원히 기다리다 죽는거지



Volatile Variables (휘발성 변수)

일반적으로 thread는 변수를 공유하고 동기화된 메서드나 동기화된 문에서 해당 변수에 엑세스하여 통신합니다.

근데 동기화시키면 매우 느림 -> 따라서 동기화시키지 않고 공유변수를 참조하는게 합리적일 수도 있음

근데 이러면 참조하는 값이 달라질수도 있어 ,

왜? 스레드는 공유 데이터를  cache 하도록 되있거든

즉 변수 값이 바뀌더라도 한동안 공유 변수의 이전 값을 보고있음

따라서 값이 바뀔떄 cache를 하지 않고 바로 값을 바꾸는 Volatile 로 선언하면 됨

이러면 조금 더 안전하게 쓸 수 있지만 race condition 문제가 해결되진 않아


휘발성 변수를 사용하는 일반적인 예는 두 번째 스레드가 종료되도록 알리는 신호를 한 스레드에서 다른 스레드로 보내는 것입니다.

두 스레드는 변수를 공유합니다.


volatile boolean terminate = false;

public void run() {
   while ( terminate == false ) {
      .
      .  // Do some work.
      .
   }
}

이 thread는 terminate를 true로 바꾸지 않는 한 반복 실행됩니다.

다른 스레드에서 terminate 값을 true로 바꿔주면 종료가 되는 방식입니다.




Atomic Variables

Parallel Programing 에서 문제는

count = count + 1  과 같은 명령문의 문제점은 명령문을 실행하는 데 여러 단계가 필요하다는 것입니다.

해당 단계가 중단 없이 완료되는 경우에만 명령문이 올바르게 실행됩니다.


Atomic Operation 은 중단할 수 없는 작업입니다.

부분적으로 완료되지 않습니다.


Java에는 몇 가지 간단한 변수 유형에 대한 원자적 연산을 구현하는 클래스를 정의하는 java.util.concurrent.atomic 패키지가 있습니다 .

원자 추가, 증가 및 감소를 포함하여 정수 값에 대한 일부 원자 연산을 정의하는 AtomicInteger 클래스를 살펴보겠습니다 .

private static AtomicInteger total = new AtomicInteger();




Threads and Parallel Processing


이 섹션에서는 해당 프로그램의 두 가지 버전을 더 살펴보겠습니다.

첫 번째는 문제가 하위 작업으로 분해되는 방식을 개선합니다.

두 번째는 스레드가 사용되는 방식을 개선합니다.

하위 작업으로 분해되는 방식은 그리 좋은 방법은 아님.


문제를 두 개의 하위 문제로 나누고 각 하위 문제를 실행하는 스레드를 생성합니다.

이상적으로는 두 프로세서를 모두 사용하면 하나의 프로세서를 사용할 때보다 시간이 절반으로 줄어듭니다.

그러나 하나의 하위 문제를 해결하는 데 다른 문제보다 4배 더 오랜 시간이 걸린다면 대부분의 경우 하나의 프로세서만 작동하게 됩니다.

이 경우 답변을 얻는 데 필요한 시간은 20%만 단축됩니다.


이를 해결하는 일반적인 방법은 문제를 더 많이 쪼개서 나누는 것임.

하지만 너무 작은 단위로 쪼개게 된다면

overhead(처리를 하기 위해 들어가는 간접적인 처리시간 , A라는 작업 수행할떄 안정성 떄문에 들어가는 다른 절차 B) 때문에

배보다 배꼽이 더 커질수도 있음



Thread Pools and Task Queues

일단 작업을 여러가지로 쪼갰어 , 그럼 이걸 어떻게 스레드에게 할당 할꺼야?

일반적으로 하위 작업은 객체로 표시돼 , 얘네는 계산을 수행하는 메서드를 갖고잇음

그 메서드를 run()이라고 하며 , Runnable에 대해 새 스레드를 생성해서 씀

하지만 처리해야될 작업이 많을떄는 overhead때문에 매번 새로운 thread만들어서 갖다 쓸 수 없어.

가장 좋은 방식은 몇 개의 스레드만 생성하고 , 각 스레드가 여러 작업을 실행하도록 하는 것임

작업을 수행하는데 여러 스레드를 사용할 수 있는 경우 해당 스레드를 Thread Pool 이라고 함

Thread pool 안에 모든 스레드가 작업 중이면 , idle 한 상태가 될 때 까지 기다려야 해

이건 queue를 활용해  , 스레드가 작업을 완료할 떄 마다 , 작업할 다른 작업을 추가해서 가져와


thread pool 에는  only one task queue 만 존재해 , 즉 작업 대기열이 단 하나 존재한단 소리

따라서 , shared resources 이기 떄문에 race condiitn 이 당연히 발생하고

동기화를 필수적으로 해줘야 합니다.


ConcurrentLinkedQueue<Runnable> queue = new ConcurrentLinkedQueue<>();

이렇게 선언하고 쓰면 되용


스레드가 시작되기 전에 작업을 대기열에 추가하는 것이 중요합니다 .

스레드는 빈 대기열을 종료 신호로 간주합니다. 스레드가 시작될 때 대기열이 비어 있으면

빈 대기열이 표시되어 작업을 수행하지 않고 시작된 직후 종료될 수 있습니다!



 Producer/Consumer and Blocking Queues

병렬 처리의 고전적인 패턴 중 하나임

Producer = 생산자 = 물건 생산하는 것

Consumer = 소비자 = 물건을 소비하는 것

이 둘은 세트로 묶여서 있어야해

분당 1개의 물건을 소비하는데  , 분당 2개씩 물건 생산한다고 생각해봐

이거 ? 의미가 없어 , 1개씩 만드나 2개씩만드나 똑같다고

오히려 무제한으로 일이 쌓이게되어 쓰래기처럼됨

따라서 처리를 기다릴 수 있는 항목 수에 제한을 두는것이 유용함

Producer 로부터 Consumer에게 물건을 전달할 수 있는 방법은

Blocking Queue 임


Prorducer 가 작업만들어 -> queue에 넣어 -> 이거 그대로 Consumer에게 전달해


Java에는 차단 대기열을 구현하는 두 가지 클래스인 LinkedBlockingQueue 및 ArrayBlockingQueue 가 있습니다 .


두 클래스 모두 java.util.concurrent 패키지에 정의되어 있으며 둘 다 BlockingQueue 라는 인터페이스를 구현합니다


bqueue.take() - 대기열에서 항목을 제거하고 반환합니다. 이 메서드가 호출될 때 대기열이 비어 있으면
이를 호출한 스레드는 항목을 사용할 수 있을 때까지 차단됩니다.
스레드가 차단된 동안 중단되면 이 메서드는 InterruptedException을 발생시킵니다.

bqueue.put(item) - 대기열에 항목을 추가합니다. 대기열의 용량이 제한되어 있고 가득 찬 경우
이를 호출한 스레드는 대기열에 공간이 열릴 때까지 차단됩니다.
스레드가 차단된 동안 중단되면 이 메서드는 InterruptedException을 발생시킵니다.

bqueue.add(item) -- 공간이 있으면 대기열에 항목을 추가합니다. 대기열의 용량이 제한되어 있고 가득 찬 경우
IllegalStateException 이 발생합니다. 이 방법은 차단되지 않습니다.

bqueue.clear() - 대기열에서 모든 항목을 제거하고 버립니다.


ArrayBlockingQueue에는 생성 시 지정되는 최대 용량이 있습니다.

ArrayBlockingQueue<ItemType> bqueue = new ArrayBlockingQueue<>(25);
이러면 25가 최대용량


LinkedBlockingQueue는 용량 이 무제한인 차단 대기열을 생성하기 위한 것입니다.

LinkedBlockingQueue<ItemType> bqueue = new LinkedBlockingQueue<>();




The ExecutorService Approach

thread pool 은 paralell programing 에서는 일반적임으로

 java.util.concurrent 패키지의 ExecutorService 인터페이스를 통해서

 스레드 풀을 생성하고 관리할 수 있음


int processors = Runtime.getRuntime().availableProcessors();

ExecutorService executor = Executors.newFixedThreadPool(processors);

processors 개의 스레드가있는 스레드 풀을 생성한다는 의미



executor.execute(task) 메소드는 실행을 위해 Runnable 객체 task 를 제출하는 데 사용될 수 있습니다

executor.shutdown() 메소드는 모든 대기 작업이 실행된 후 스레드 풀을 종료하도록 지시합니다.

executor.shutdownNow() 메서드는 executor.shutdown() 과 유사 하지만 아직
대기열에 있는 대기 작업을 모두 삭제하고 현재 실행 중인 작업을 중지하려고 시도합니다.



ExecutorService 에 대한 작업은 Callable<T> 유형의 개체로 표시될 수도 있습니다 .
이는 매개 변수 없이  call() 메서드 와 T 반환 유형을 정의하는 매개 변수화된 기능 인터페이스입니다 .


Callable c 는 executor.submit(c) 를 호출 하여 ExecutorService 에 제출할 수 있습니다 .
 그런 다음 Callable 은 나중에 실행됩니다.

 문제는 계산이 완료되었을 때 계산 결과를 어떻게 얻을 수 있느냐는 것입니다.

 또 다른 인터페이스인 Future<T> 를 통해 해결됩니다 . executor.submit(c) 메서드는 미래 계산 결과를 나타내는 Future를 반환합니다 .


Future v 는 결과가 사용 가능한지 확인하기 위해 호출할 수 있는 부울 값 함수 인 v.isDone() 을 포함한 여러 메서드를 정의합니다 .

그리고 v.get() 은 미래의 가치를 검색합니다. v.get() 메서드는 값을 사용할 수 있을 때까지 차단됩니다. 또한 예외를 생성할 수 있으며

try..catch 문 에서 호출해야 합니다 .



 Wait and Notify



 두 번째 스레드가 첫 번째 스레드의 결과가 필요한 지점에 도달하면 중지하고 결과가 생성될 때까지 기다려야 할 수 있습니다.

Java에는 이러한 종류의 "대기" 및 "알림"을 수행하는 방법이 있습니다.

Object 클래스에 인스턴스 메소드로 정의된 wait() 및 inform() 메소드가 있으므로 모든 객체와 함께 사용할 수 있습니다.




일반적인 개념은 스레드가 일부 개체에서 wait() 메서드를 호출하면 해당 스레드는 동일한 개체의 inform() 메서드가

호출될 때까지 절전 모드로 전환된다는 것입니다. wait() 를 호출한 스레드가 대기 중이므로 분명히 다른 스레드에 의해 호출되어야 합니다 .



일반적인 패턴은 스레드 A가 스레드 B의 결과가 필요할 때 wait()를 호출

스레드 B가 결과를 준비하면 스레드 A가 대기 중인 경우 결과를 사용할 수 있도록 깨우는 inform()을 호출



Example

if ( resultIsAvailable() == false )
   obj.wait();  // wait for notification that the result is available
useTheResult();



while Thread B does something like:

generateTheResult();
obj.notify();  // send out a notification that the result is available


이런 경우 이상한 race condition 이 있을 수 있음

1. wait 실행결정함
2. wait 실행전에 notify 호출함
3. wait 실행돼서 notify 기다림


deadlock 상태 가능 , 따라서 이런애들은 Synchronized 쓴다.



makeResult = generateTheResult();  // Not synchronized!
synchronized(lock) {
   sharedResult = makeResult;
   lock.notify();
}
while the consumer would execute code such as:

synchronized(lock) {
   while ( sharedResult == null ) {
      try {
         lock.wait();
      }
      catch (InterruptedException e) {
      }
   }
   useResult = sharedResult;
}
useTheResult(useResult);  // Not synchronized!




Threads and Networking

Blocking I/O

클라이언트가 I/O 작업을 진행하면 해당 쓰레드가 진행하는 작업을 중지하게 된다.

사용자의 입력을 받는 작업 , 1부터 10까지 출력하는 작업 이 있다면

입력을 받기 전까지 , 1~10 은 출력이 불가능하다

이렇게 스레드가 입출력 처리를 위해 기다리는 것을 I/O Blocking 이라 한다.

멀티스레드로 바꿀 경우 I/O Blocking 이 발생하지 않음





















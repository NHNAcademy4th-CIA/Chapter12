Question 1:Write a complete subclass of Thread to represent a thread that writes out the numbers from 1 to 10. Then write some code that creates and starts a thread belonging to that class.
class countThread extends Thread {
	@Override
	public void run() {
		for(int i=1;i<=10;i++) {
			System.out.println(i);
		}
	}
}

Question 2:Suppose that thrd is an object of type Thread. Explain the difference between calling thrd.start() and calling thrd.run().
- 스레드를 실행하기 위해 사용되는 메서드
- start() : 새로운 스레드를 만들어 run 메서드를 실행시킨다
- run() : 해당 스레드가 그대로 실행되고 run이 끝나면 종료된다

Question 3:What is a race condition?
- 두 개의 스레드가 하나의 자원을 놓고 서로 사용하려고 경쟁하는 상황
- 두 스레드가 공유된 리소스에 동시에 접근할 때 발생한다

Question 4:How does synchronization prevent race conditions, and what does it mean to say that synchronization only provides mutual exclusion?
- synchronization → 리소스에 대해 액세스가 진행중이면 다른 프로세스는 공유 리소스에 접근할 수 없다.
- 다만 상호 배제(mutual exclusion)만을 제공하는데

Question 5:Suppose that a program uses a single thread that takes 4 seconds to run. Now suppose that the program creates two threads and divides the same work between the two threads. What can be said about the expected execution time of the program that uses two threads?
- 각 작업당 2초

Question 6:What is an ArrayBlockingQueue and how does it solve the producer/consumer problem?
- 스레드가 작업이 수행될 때까지 기다리게 하는 방법
- 대기열을 추가하여 대기열에는 생산자가 생산하는 작업을 추가하고 소비자가 작업을 수행 가능할 때 대기열에서 작업을 빼와 소비자에게 전달

Question 7:What is a thread pool?
- 여러 스레드를 작업 수행에 사용할 수 있다
- 각 작업을 수행하기 위해 새 스레드를 만들지 않기 위해 사용된다

Question 8:Network server programs are often multithreaded. Explain what this means and why it is true.
- 네트워크상 입출력 작업이 무기한 차단될 수 있기 때문에 사용한다(사용자가 입력할 때까지 기다려야 함)

Question 9:Why does a multithreaded network server program often use many times more threads than the number of available processors?
- 언제든지 많은 스레드가 차단될 수 있으므로 프로세서 수보다 더 많은 스레드를 갖는 것이 합리적

Question 10:Consider the ThreadSafeCounter example from Subsection 12.1.3:

public class ThreadSafeCounter {

   private int count = 0;  // The value of the counter.

   synchronized public void increment() {
      count = count + 1;
   }

   synchronized public int getValue() {
      return count;
   }

}
The increment() method is synchronized so that the caller of the method can complete the three steps of the operation "Get value of count," "Add 1 to value," "Store new value in count" without being interrupted by another thread. But getValue() consists of a single, simple step. Why is getValue() synchronized? (This is a deep and tricky question.)

- 스레드는 공유 데이터를 캐시해 자신의 로컬 복사본을 유지할 수 있다.
- → 다른 스레드에 의해 변수의 값이 변경된 후에도 한동안 공유 변수의 이전 값이 계속 보일 수 있다.
- → 동기화를 시켜 변경사항이 즉시 적용되도록 해야 한다.